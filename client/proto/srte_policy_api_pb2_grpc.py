# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import srte_policy_api_pb2 as proto_dot_srte__policy__api__pb2


class SRTEPolicyStub(object):
    """SRTEPolicy gRPC service provides clients a mechanism
    to programmatically create/read/update/delete SR-TE and SRv6TE policies.
    The real-time monitoring of these policies is done via BGP-LS or telemetry.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SRTEPolicyAdd = channel.unary_unary(
                '/SRTE.SRTEPolicy/SRTEPolicyAdd',
                request_serializer=proto_dot_srte__policy__api__pb2.PolicyMsg.SerializeToString,
                response_deserializer=proto_dot_srte__policy__api__pb2.PolicyOpRsp.FromString,
                )
        self.SRTEPolicyDelete = channel.unary_unary(
                '/SRTE.SRTEPolicy/SRTEPolicyDelete',
                request_serializer=proto_dot_srte__policy__api__pb2.PolicyMsg.SerializeToString,
                response_deserializer=proto_dot_srte__policy__api__pb2.PolicyOpRsp.FromString,
                )


class SRTEPolicyServicer(object):
    """SRTEPolicy gRPC service provides clients a mechanism
    to programmatically create/read/update/delete SR-TE and SRv6TE policies.
    The real-time monitoring of these policies is done via BGP-LS or telemetry.
    """

    def SRTEPolicyAdd(self, request, context):
        """The SRTEPolicyAdd RPC is used to create/update a policy based on the
        passed parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SRTEPolicyDelete(self, request, context):
        """The SRTEPolicyDelete RPC is used to delete a policy/candidate-paths.
        If the message only contains the key of the policy, then all the CPs with gRPC
        originator-protocol are deleted. The policy is also deleted if it has no more CPs.
        If the message contains the keys of one or more CPs, then only these CPs are
        deleted and they have to be gRPC CPs.
        There is no requirement/enforcement for the client to delete the policy/CPs
        it created.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SRTEPolicyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SRTEPolicyAdd': grpc.unary_unary_rpc_method_handler(
                    servicer.SRTEPolicyAdd,
                    request_deserializer=proto_dot_srte__policy__api__pb2.PolicyMsg.FromString,
                    response_serializer=proto_dot_srte__policy__api__pb2.PolicyOpRsp.SerializeToString,
            ),
            'SRTEPolicyDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.SRTEPolicyDelete,
                    request_deserializer=proto_dot_srte__policy__api__pb2.PolicyMsg.FromString,
                    response_serializer=proto_dot_srte__policy__api__pb2.PolicyOpRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SRTE.SRTEPolicy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SRTEPolicy(object):
    """SRTEPolicy gRPC service provides clients a mechanism
    to programmatically create/read/update/delete SR-TE and SRv6TE policies.
    The real-time monitoring of these policies is done via BGP-LS or telemetry.
    """

    @staticmethod
    def SRTEPolicyAdd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SRTE.SRTEPolicy/SRTEPolicyAdd',
            proto_dot_srte__policy__api__pb2.PolicyMsg.SerializeToString,
            proto_dot_srte__policy__api__pb2.PolicyOpRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SRTEPolicyDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SRTE.SRTEPolicy/SRTEPolicyDelete',
            proto_dot_srte__policy__api__pb2.PolicyMsg.SerializeToString,
            proto_dot_srte__policy__api__pb2.PolicyOpRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
